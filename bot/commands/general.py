from pathlib import Path

import bot.ui.home.keyboards
import config
from config import BASE_DIR

import random
from datetime import datetime

from bot import data, timetable, keyboards

from aiogram import types
from bot.commands import buttoned
from bot.data import dispatcher
from aiogram.dispatcher import filters

from bot.states import GroupSettingState, ReportingState
from aiogram.dispatcher import FSMContext

from bot.ui.handlers import send_ui

from bot.ui.keyboards import menu_keyboard

#@dispatcher.message_handler(commands=['start'])
# async def process_start_command(message: types.Message):
#     data.increment("start", message.from_user.id)
#
#     chat_id = str(message.chat.id)
#     if message.from_user.id not in data.waiting_for_group_num:
#         data.waiting_for_group_num.append(message.from_user.id)
#
#     msg = "*–ö–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è?*"
#     msg += "\n  ‚Ä¢  –§–ò–¢–† - –≥—Ä—É–ø–ø—ã –≤—Å–µ—Ö 4-—Ö –∫—É—Ä—Å–æ–≤"
#     msg += "\n  ‚Ä¢  –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã - —Ç–æ–ª—å–∫–æ 1 –∏ 2 –∫—É—Ä—Å—ã"
#
#     await data.bot.send_message(chat_id, text=msg, parse_mode="Markdown", reply_markup=keyboards.ReplyKeyboardRemove())
#
#     msg = "üëã* –ï—â—ë —Ä–∞–∑ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!* \n\n_–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π –æ—á–µ–Ω—å –ª–µ–≥–∫–æ._\n\n"
#     msg += "*–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ üì≤*"
#
#     await GroupSettingState.awaiting.set()
#     await data.bot.send_message(chat_id, text=msg, parse_mode="Markdown")



# @dispatcher.message_handler(filters.Text(equals=keyboards.report_button.text))
# async def process_report_command(message: types.Message):
#     await ReportingState.awaiting.set()
#     await message.answer("_–°–µ–∫—É–Ω–¥–æ—á–∫—É..._", parse_mode="Markdown", reply_markup=keyboards.ReplyKeyboardRemove())
#     await message.answer("_üßê –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–∞ –æ—à–∏–±–∫—É, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≥–∞–¥–æ—Å—Ç–µ–π?_"
#                          "\n\n*–¢–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*", parse_mode="Markdown",
#                          reply_markup=keyboards.cancel_keyboard)


# @dispatcher.message_handler(commands=['setgroup'])
# @dispatcher.message_handler(filters.Text(equals=keyboards.new_group_button.text))
# @dispatcher.message_handler(filters.Text(equals=keyboards.set_button.text))
# async def process_setgroup_command(message: types.Message):
#     await GroupSettingState.awaiting.set()
#     await message.answer("_C–µ–∫—É–Ω–¥–æ—á–∫—É..._", parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())
#     await message.answer("üì≤ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
#                          reply_markup=keyboards.cancel_keyboard)


#@dispatcher.message_handler(state=GroupSettingState.awaiting)
# async def process_group_input(message: types.Message, state: FSMContext):
#     reply_text = ""
#
#     group = message.text.split()[0]
#
#     user_id = str(message.from_user.id)
#
#     if timetable.is_there_such_a_group(group):
#         reply_text += "*–û—Ç–ª–∏—á–Ω–æ! ü•≥*"
#         reply_text += "\n\n_–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ª–µ–≥–∫–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å._"
#         await message.answer(reply_text, reply_markup=bot.ui.home.keyboards.home_keyboard, parse_mode="Markdown")
#         data.users_and_groups[user_id] = group
#
#     else:
#         reply_text = "ü•≤ –ö–∞–∂–µ—Ç—Å—è, –≤—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –≤–≤–µ–ª–∏. –õ–∏–±–æ —É –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã..."
#         await message.answer(reply_text, parse_mode="Markdown")
#
#     await state.finish()


@dispatcher.message_handler(commands=['set'])
async def process_set_command(message: types.Message):
    reply_text = ""

    group = message.get_args()

    user_id = str(message.from_user.id)

    if timetable.is_there_such_a_group(group):
        reply_text += "*–û—Ç–ª–∏—á–Ω–æ! ü•≥*"
        reply_text += "\n\n_–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ª–µ–≥–∫–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å._"
        await message.reply(reply_text, parse_mode="Markdown")
        data.users_and_groups[user_id] = group

    else:
        reply_text = "ü•≤ –ö–∞–∂–µ—Ç—Å—è, –≤—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –≤–≤–µ–ª–∏. –õ–∏–±–æ —É –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã..."
        await message.reply(reply_text, parse_mode="Markdown")


# async def update_warning(user_id):
#     msg = "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ... " \
#           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç–æ—á–µ–∫!"
#     await data.bot.send_message(user_id, text=msg, parse_mode="HTML", disable_web_page_preview=True)


# @dispatcher.message_handler(commands=['week'])
# @dispatcher.message_handler(filters.Text(equals=keyboards.week_button.text))
# async def process_week_command(message: types.Message):
#     msg_text = await get_week(id)
#
#     await data.bot.send_message(message.chat.id, text=msg_text, parse_mode="Markdown")
#
#     await advertise(message.from_user.id)


async def get_week(id):
    data.increment("week", id)
    week_num = timetable.get_current_week()
    data.interactions_count["week"] += 1
    date = datetime.today()
    weekday = datetime.weekday(date)
    if weekday == 6:
        if week_num == 1:
            weekday = 2
        else:
            weekday = 1
        msg_text = "_–° –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è {}-—è –Ω–µ–¥–µ–ª—è!_ üëå".format(weekday)
    else:
        msg_text = "_–°–µ–π—á–∞—Å {}-—è –Ω–µ–¥–µ–ª—è!_ üëå".format(week_num)

    return msg_text


# async def process_rep_command(message: types.Message):
#     if message.from_user.id not in data.recently_sended_report:
#         report = message.get_args()
#         report_mes = ""
#         id = str(message.chat.id)
#         group = ""
#         if id in data.users_and_groups:
#             group = data.users_and_groups[id]
#         if group:
#             report_mes += "(" + group + ") "
#         report_mes += "{}:   ".format(id)
#         report_mes += report
#
#         msg = "-"
#         if len(report) > 1024:
#             msg = "*–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ...*\n_–ú–æ–∂–µ—Ç, —Å–º–æ–∂–µ—Ç–µ –≤—ã—Ä–∞–∑–∏—Ç—å—Å—è –ª–∞–∫–æ–Ω–∏—á–Ω–µ–µ?_üëâüèªüëàüèª"
#         else:
#             filename = "datasource/reports.txt"
#             with open(Path(BASE_DIR / filename), 'a', encoding='UTF-8') as f:
#                 f.write(report_mes)
#
#             data.recently_sended_report.append(message.from_user.id)
#
#             msg = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üì®"
#
#             await data.bot.send_message(config.ADMIN_ID, text=report_mes, parse_mode="Markdown",
#                                         reply_markup=keyboards.short_keyborad)
#
#         await data.bot.send_message(message.chat.id, text=msg, parse_mode="Markdown",
#                                     reply_markup=keyboards.short_keyborad)
#     else:
#         m = "‚è≥ _–í—ã —Å–æ–≤—Å–µ–º –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç–æ—á–µ–∫, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–Ω–æ–≤–∞!_"
#         await data.bot.send_message(message.chat.id, text=m, parse_mode="Markdown",
#                                     reply_markup=keyboards.short_keyborad)


# @dispatcher.callback_query_handler(state=GroupSettingState.awaiting, text="cancel")
# @dispatcher.callback_query_handler(state=ReportingState.awaiting, text="cancel")
# async def process_cancel_command(call: types.CallbackQuery, state: FSMContext):
#     await call.answer(text="done")
#     await state.finish()
#     data.increment("cancel", call.from_user.id)
#
#     await data.bot.send_message(call.from_user.id, text="_–û—Ç–º–µ–Ω—è–µ–º..._", parse_mode="Markdown",
#                                 reply_markup=keyboards.options_keyboard)
