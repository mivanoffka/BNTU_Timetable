import asyncio
import copy
import os

import aiogram.utils.exceptions

import bot.ui.keyboards
from bot.ui.start.keyboards import continue_inline, continue_keyboard
from bot.ui.keyboards import delete_keyboard
import config
from bot import data, timetable
from datetime import datetime
from parsing import autoparser
from aiogram import types

from bot.data import dispatcher

from aiogram.dispatcher import filters


@dispatcher.message_handler(filters.IDFilter(config.ADMIN_ID), commands=["notify"])
async def process_notify_command(message: types.Message):
    inf_mes = message.html_text[8:]
    if len(inf_mes) > 4000:
        return

    else:
        lst = data.users_db.get_list()
        lst_len = len(lst)
        sent_count = 0

        for uinfo in lst:
            try:
                await data.bot.send_message(uinfo.id, text=inf_mes, parse_mode="HTML",
                                            reply_markup=bot.ui.keyboards.delete_keyboard)
                sent_count += 1
                print("Message #{} sent.".format(sent_count))
            except aiogram.utils.exceptions.BotBlocked:
                try:
                    data.users_db.delete(str(uinfo.id))
                except:
                    pass

                pass

        data.bot.send_message(config.ADMIN_ID, txt="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({}/{})".format(sent_count, lst_len),
                              reply_markup=bot.ui.keyboards.delete_keyboard)


@dispatcher.message_handler(filters.IDFilter(config.ADMIN_ID), commands=["inform"])
async def process_inform_command(message: types.Message):
    mx = len(data.users_and_groups)
    mn = 0

    lst = copy.copy(data.users_and_groups)

    mes_1 = "üö© <b>–°–≤–∏—Å—Ç–∞—Ç—å –≤—Å–µ—Ö –Ω–∞–≤–µ—Ä—Ö!</b>"
    mes_1 += "\n\nü§ñ <i>–ë–æ—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è! –¢–µ–ø–µ—Ä—å –≤–µ—Å—å –µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å—Ç—Ä–æ–µ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–∞—á–µ...</i>"
    mes_1 += "\n\nüôà –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–µ–ø—Ä–∏–≤—ã—á–Ω—ã–º, –Ω–æ –ø–æ–≤–µ—Ä—å—Ç–µ ‚Äì —Ç–∞–∫ –≥–æ—Ä–∞–∑–¥–æ —É–¥–æ–±–Ω–µ–µ! (–∞ –≥–ª–∞–≤–Ω–æ–µ, –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∫—É–¥–∞ –º–µ–Ω—å—à–µ...)"
    mes_1 +=  "<a href='https://pay.netmonet.alfabank.by/42308250'>\n\n<b><i>üíñ –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –±–æ—Ç–∞ –∏ –µ–≥–æ –Ω–µ –º–µ–Ω–µ–µ –ª—é–±–∏–º–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!</i></b></a>"

    mes_2 = "‚ùó <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ!</b>"
    mes_2 += "\n\nüìù <i>–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –∑–∞–Ω–æ–≤–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É</i>"
    mes_2 += "\n\nüì≤ <b>–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è¬ª, –∏–ª–∏ –∂–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /start <b>–∏–∑ –º–µ–Ω—é</b>"


    for user_id in lst:
        try:
            if not lst[user_id] == "BLOCKED":
                await data.bot.send_message(user_id, mes_1, parse_mode="HTML", reply_markup=continue_keyboard,
                                            disable_web_page_preview=True)
                await asyncio.sleep(0.5)
                await data.bot.send_message(user_id, mes_2, parse_mode="HTML")

                mn += 1
                print("Message #{} sent.".format(mn))

            await asyncio.sleep(0.5)
        except aiogram.utils.exceptions.BotBlocked:
            try:
                data.users_and_groups[user_id] = "BLOCKED"
            except:
                pass
        except:
            pass

    await data.bot.send_message(config.ADMIN_ID, text="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n{}/{}".format(mn, mx),
                                parse_mode="HTML")


def get_stats_text(message: types.Message):
    arg = message.get_args()

    text = "–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å {}:\n".format(data.interactions_count["time"])

    for key in data.interactions_count:
        if key != "time":
            text += "\n   {}: {} —Ä–∞–∑(–∞)".format(key, data.interactions_count[key])
            if arg == "reset":
                data.interactions_count[key] = 0

    text += "\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + str(len(data.users_db.get_list()))
    text += "\n–ù–µ–¥–∞–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å: " + str(len(data.recent_users))

    if arg == "reset":
        now = datetime.now()
        data.interactions_count["time"] = now.strftime("%d/%m/%Y %H:%M:%S")
        data.recent_users.clear()

    return text


@dispatcher.message_handler(filters.IDFilter(config.ADMIN_ID), commands=["stats"])
async def process_stats_command(message: types.Message):
    txt = get_stats_text(message)
    await data.bot.send_message(config.ADMIN_ID, text=txt, reply_markup=delete_keyboard)


@dispatcher.message_handler(filters.IDFilter(config.ADMIN_ID), commands=["update"])
async def process_update_command(message: types.Message):
    await data.bot.send_message(message.chat.id, text="–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ... üîÑ",
                                reply_markup=bot.ui.keyboards.delete_keyboard)
    try:
        data.is_updating = True
        print("Schedule updating started...")
        autoparser.download_and_parse()
        data.schedule = timetable.init()
        await data.bot.send_message(message.chat.id, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ",
                                    reply_markup=bot.ui.keyboards.delete_keyboard)
        print("Schedule succesfully updated!")
        data.is_updating = False
    except:
        data.is_updating = False
        await data.bot.send_message(message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. ‚ùå",
                                    reply_markup=bot.ui.keyboards.delete_keyboard)
        raise
    data.is_updating = False


@dispatcher.message_handler(filters.IDFilter(config.ADMIN_ID), commands=["danya"])
async def process_danya_command(message: types.Message):
    msg = "–°–µ—Ä–¥–µ—á–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –≤–∞–º, –ª—é–±–∏–º—ã–π –î–∞–Ω–∏–ª–∞ –°–µ—Ä–≥–µ–µ–≤–∏—á! –ú—ã –±–µ–∑ –≤–∞—Å –∫–∞–∫ –±–µ–∑ —Ä—É–∫! ‚ù§Ô∏è"
    await message.bot.send_message("154246218", text=msg, reply_markup=bot.ui.keyboards.delete_keyboard)


@dispatcher.message_handler(filters.IDFilter(config.ADMIN_ID), commands=["danik"])
async def process_danik_command(message: types.Message):
    msg = "–î–∞–Ω–∏–∏–ª –î–º–∏—Ç—Ä–∏–µ–≤–∏—á, –Ω–µ —Å–æ–∏–∑–≤–æ–ª–∏—Ç–µ –ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø–µ—à–µ–µ —ç—Ä–æ—Ç–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? üí©"
    await message.bot.send_message("1344775275", text=msg, reply_markup=bot.ui.keyboards.delete_keyboard)


@dispatcher.message_handler(filters.IDFilter(config.ADMIN_ID), commands=["reply"])
async def process_reply_command(message: types.Message):
    args = message.get_args()
    id = str(args.split()[0])

    mes = args[len(id) + 1:]

    text = "*–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞*!\n\n_{}_".format(mes)
    try:
        await data.bot.send_message(id, text=text, parse_mode="Markdown")
        await data.bot.send_message(config.ADMIN_ID, text="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                                    parse_mode="Markdown", reply_markup=bot.ui.keyboards.delete_keyboard)
    except:
        await data.bot.send_message(config.ADMIN_ID, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                                    parse_mode="Markdown")



