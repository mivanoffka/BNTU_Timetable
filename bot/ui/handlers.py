from pathlib import Path

from aiogram.types import ReplyKeyboardRemove

import bot.ui.options.keyboards
import config
from config import BASE_DIR

from bot import data

from aiogram import types
from bot.data import dispatcher
from aiogram.dispatcher import filters

from bot.states import GroupSettingState, ReportingState
from aiogram.dispatcher import FSMContext

from bot.ui.keyboards import cancel_keyboard, open_menu_keyboard, delete_keyboard
from bot.ui.home.keyboards import home_keyboard
from bot.ui.options.keyboards import options_keyboard
from bot.ui.advertisement import advertise
from bot.ui.start.keyboards import continue_reply_button
from bot.ui.dailymail.keyboards import dailymail_keyboard
import bot.display

import random

default_mes = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ...</b>\n\n<i>üé≤ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç—ã–∫–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏!</i>"


async def send_ui(id, mes=default_mes):
    #await send_delay(id)
    #await data.bot.send_message(id, mes, reply_markup=home_keyboard)
    #await bot.display.update_display(id, mes, home_keyboard)
    await bot.display.send_display(id, mes, home_keyboard)



@dispatcher.message_handler(commands=['menu'])
@dispatcher.message_handler(filters.Text(equals=bot.ui.keyboards.open_menu_button.text))
async def process_ui_command(message: types.Message):
    await bot.display.try_delete(message)
    await send_ui(message.from_user.id)


@dispatcher.callback_query_handler(text="goto_options")
async def process_options_command(call: types.CallbackQuery):
    bot.data.increment("settings", call.from_user.id)

    try:
        await call.message.edit_reply_markup(reply_markup=options_keyboard)
    except:
        pass
    await call.answer()
    await advertise(call.from_user.id)


@dispatcher.callback_query_handler(text="goto_home")
async def process_home_command(call: types.CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=home_keyboard)
    await call.answer()
    await advertise(call.from_user.id)





@dispatcher.callback_query_handler(text="goto_home_clr")
async def process_home_command(call: types.CallbackQuery):
    #await call.message.edit_reply_markup(reply_markup=home_keyboard)
    await bot.display.update_display(call.from_user.id, default_mes, home_keyboard, no_menu=True)
    await call.answer()


@dispatcher.callback_query_handler(text="delete_message")
async def process_delete_command(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()


@dispatcher.callback_query_handler(text="input_report")
async def process_devinfo_command(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in data.recently_sended_report:
        await ReportingState.awaiting.set()
        txt = "<i>üßê –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–∞ –æ—à–∏–±–∫—É, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å" \
              " –≥–∞–¥–æ—Å—Ç–µ–π?</i>\n\n<b>–¢–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>"

        await bot.display.update_display(call.from_user.id, txt, cancel_keyboard, no_menu=True)
    else:
        m = "‚è≥ <i>–í—ã —Å–æ–≤—Å–µ–º –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç–æ—á–µ–∫, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–Ω–æ–≤–∞!</i>"
        await bot.display.update_display(call.from_user.id, m, options_keyboard, no_menu=True)


@dispatcher.callback_query_handler(text="input_group")
async def process_devinfo_command(call: types.CallbackQuery, state: FSMContext):
        await GroupSettingState.awaiting.set()

        msg = "<b>‚ùì –ö–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è?</b>"
        msg += "\n  ‚Ä¢  –§–ò–¢–† - –≥—Ä—É–ø–ø—ã –≤—Å–µ—Ö 4-—Ö –∫—É—Ä—Å–æ–≤"
        msg += "\n  ‚Ä¢  –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã - —Ç–æ–ª—å–∫–æ 1 –∏ 2 –∫—É—Ä—Å—ã"
        msg += "\n\n‚òéÔ∏è <b>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>"

        #await call.message.edit_text(msg, parse_mode="Markdown", reply_markup=cancel_keyboard)
        await bot.display.update_display(call.from_user.id, msg, cancel_keyboard, no_menu=True)


@dispatcher.callback_query_handler(state=GroupSettingState.awaiting, text="input_cancel")
@dispatcher.callback_query_handler(state=ReportingState.awaiting, text="input_cancel")
async def process_cancel_command(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.finish()
    data.increment("cancel", call.from_user.id)

    #await call.message.delete()
    #await send_ui(call.from_user.id)
    await bot.display.update_display(call.from_user.id, default_mes, home_keyboard, no_menu=True)


@dispatcher.message_handler(state=ReportingState.awaiting)
async def process_send_report_command(message: types.message, state: FSMContext):
    await bot.display.try_delete(message)
    if "/menu" in message.text:
        await state.finish()
        await send_ui(message.from_user.id)

        return

    report = message.text
    report_mes = ""
    id = str(message.chat.id)

    group = data.users_db.get_info(id).group

    report_mes += "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "
    if str(message.from_user.username) != "None":
        report_mes += "{} ({})".format(message.from_user.username, message.from_user.id)
    else:
        report_mes += "{}".format(message.from_user.id)
    if group:
        report_mes += " –∏–∑ –≥—Ä—É–ø–ø—ã {}".format(group)
    report_mes = "¬´" + report + "¬ª" + "*" + report_mes + "*"

    msg = "üì® <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>"

    if len(report) > 1024:
        msg = "<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ...</b>\n<i>–ú–æ–∂–µ—Ç, —Å–º–æ–∂–µ—Ç–µ –≤—ã—Ä–∞–∑–∏—Ç—å—Å—è –ª–∞–∫–æ–Ω–∏—á–Ω–µ–µ?</i>üëâüèªüëàüèª"
        await bot.display.update_display(message.from_user.id, msg, options_keyboard, no_menu=True)
    else:
        filename = "datasource/reports.txt"
        with open(Path(BASE_DIR / filename), 'a', encoding='UTF-8') as f:
            f.write(report_mes)

        data.recently_sended_report.append(message.from_user.id)

        await data.bot.send_message(config.ADMIN_ID, text=report_mes, parse_mode="Markdown")
        await bot.display.update_display(message.from_user.id, msg, options_keyboard, no_menu=True)
        await bot.display.renew_display(config.ADMIN_ID, text="<b>üìÆ –ü—Ä–∏—à—ë–ª –æ—Ç–∑—ã–≤.</b> \n\n–ü—Ä–æ–ª–∏—Å—Ç–∞–π—Ç–µ –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.", keyboard=bot.ui.home.keyboards.home_keyboard)

    await state.finish()
    await advertise(message.from_user.id)

