from pathlib import Path

import bot.ui.options.keyboards
import config
from config import BASE_DIR

from bot import data

from aiogram import types
from bot.data import dispatcher
from aiogram.dispatcher import filters

from bot.states import GroupSettingState, ReportingState
from aiogram.dispatcher import FSMContext

from bot.ui.keyboards import cancel_keyboard, menu_keyboard, delete_keyboard
from bot.ui.home.keyboards import home_keyboard
from bot.ui.options.keyboards import options_keyboard
from bot.ui.advertisement import advertise
from bot.ui.start.keyboards import continue_reply_button

import random

default_mes = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ...</b>\n\n<i>üé≤ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç—ã–∫–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏!</i>"

async def send_ui(id, mes=default_mes):
    await data.bot.send_message(id, mes, reply_markup=home_keyboard)


@dispatcher.message_handler(commands=['menu'])
@dispatcher.message_handler(filters.Text(equals=bot.ui.keyboards.open_menu_button.text))
async def process_ui_command(message: types.Message):
    await send_ui(message.from_user.id)


@dispatcher.callback_query_handler(text="goto_options")
async def process_options_command(call: types.CallbackQuery):
    bot.data.increment("settings", call.from_user.id)

    try:
        await call.message.edit_reply_markup(reply_markup=options_keyboard)
    except:
        pass
    await call.answer()
    await advertise(call.from_user.id)


@dispatcher.callback_query_handler(text="goto_home")
async def process_home_command(call: types.CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=home_keyboard)
    await call.answer()
    await advertise(call.from_user.id)


@dispatcher.callback_query_handler(text="delete_message")
async def process_delete_command(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()


@dispatcher.callback_query_handler(text="input_report")
async def process_devinfo_command(call: types.CallbackQuery, state: FSMContext):

    await ReportingState.awaiting.set()
    await call.message.edit_text("_üßê –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–∞ –æ—à–∏–±–∫—É, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å"
                                 " –≥–∞–¥–æ—Å—Ç–µ–π?_\n\n*–¢–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*",
                                 parse_mode="Markdown", reply_markup=cancel_keyboard)


@dispatcher.callback_query_handler(text="input_group")
async def process_devinfo_command(call: types.CallbackQuery, state: FSMContext):
        await GroupSettingState.awaiting.set()

        msg = "*‚ùì –ö–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è?*"
        msg += "\n  ‚Ä¢  –§–ò–¢–† - –≥—Ä—É–ø–ø—ã –≤—Å–µ—Ö 4-—Ö –∫—É—Ä—Å–æ–≤"
        msg += "\n  ‚Ä¢  –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã - —Ç–æ–ª—å–∫–æ 1 –∏ 2 –∫—É—Ä—Å—ã"
        msg += "\n\n‚òéÔ∏è *–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ.*"

        await call.message.edit_text(msg, parse_mode="Markdown", reply_markup=cancel_keyboard)


@dispatcher.callback_query_handler(state=GroupSettingState.awaiting, text="input_cancel")
@dispatcher.callback_query_handler(state=ReportingState.awaiting, text="input_cancel")
async def process_cancel_command(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.finish()
    data.increment("cancel", call.from_user.id)

    await call.message.delete()
    await send_ui(call.from_user.id)


@dispatcher.message_handler(state=ReportingState.awaiting)
async def process_send_report_command(message: types.message, state: FSMContext):
    if message.from_user.id not in data.recently_sended_report:
        report = message.text
        report_mes = ""
        id = str(message.chat.id)

        group = data.users_db.get_info(id).group

        report_mes += "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "
        if str(message.from_user.username) != "None":
            report_mes += "{} ({})".format(message.from_user.username, message.from_user.id)
        else:
            report_mes += "{}".format(message.from_user.id)
        if group:
            report_mes += " –∏–∑ –≥—Ä—É–ø–ø—ã {}".format(group)
        report_mes = "¬´" + report + "¬ª" + "*" + report_mes + "*"

        msg = "-"
        if len(report) > 1024:
            msg = "*–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ...*\n_–ú–æ–∂–µ—Ç, —Å–º–æ–∂–µ—Ç–µ –≤—ã—Ä–∞–∑–∏—Ç—å—Å—è –ª–∞–∫–æ–Ω–∏—á–Ω–µ–µ?_üëâüèªüëàüèª"
        else:
            filename = "datasource/reports.txt"
            with open(Path(BASE_DIR / filename), 'a', encoding='UTF-8') as f:
                f.write(report_mes)

            data.recently_sended_report.append(message.from_user.id)

            msg = "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üì®"

            await data.bot.send_message(config.ADMIN_ID, text=report_mes, parse_mode="Markdown")

        await send_ui(message.from_user.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üì®")
    else:
        m = "‚è≥ _–í—ã —Å–æ–≤—Å–µ–º –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç–æ—á–µ–∫, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–Ω–æ–≤–∞!_"
        await data.bot.send_message(message.chat.id, text=m, parse_mode="Markdown", reply_markup=options_keyboard)
    await state.finish()
    await advertise(message.from_user.id)

